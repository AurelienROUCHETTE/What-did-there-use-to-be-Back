security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_secure: # Regle de firewall pour TOUTES les routes de l'api secure, c'est ici que je définis que TOUTES les routes de l'api nécéssitent un token
            pattern:   ^/api/secure # ici on dit que ce firewall s'applique pour TOUTES les routes qui commence par le endpoint '/api/secure'
            stateless: true # Le Firewall est sans état (no sessions ici)
            jwt: ~ # on indique que ce firewall utilise les tokens JWT pour l'auth, toutes les requetes effectués vers l'API doivent inclure un JWT valide pour etre autorisé.
        api_public: # Regle de firewall pour TOUTES les routes de l'api publique, c'est ici que je définis que TOUTES les routes de l'api
            pattern:   ^/api # ici on dit que ce firewall s'applique pour TOUTES les routes qui commence par le endpoint '/api'
            stateless: true # Le Firewall est sans état (no sessions ici)

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                target: app_login

        # TODO: remember_me:
        #     secret: '%kernel.secret%'
        #     lifetime: 604800
        #     path: /
        #     always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon